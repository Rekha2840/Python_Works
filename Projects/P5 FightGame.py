from random import randint, choice
from zdecor import hr, sp as spc
from morelists import randchoices
from time import sleep
from filefunc import file
from matrixpy import ratio
from string import in_str

class Fighter:
   def __init__(self,name,level,health,lost,won,sp):
      self.nm= name
      self.hp= health;
      self.lvl= level;
      self.lost= lost
      self.won= won
      self.sp= sp
      self.maxsp= sp;
      self.maxhp= health;

   def pwrs(self,pwr1,pwr2,pwr3):  # dmg done by each power
      self.pwr1= int(ratio(5,self.hp))  + int(ratio(20,self.lvl))
      self.pwr2= int(ratio(10,self.hp))  + int(ratio(24,self.lvl))
      self.ult= int(ratio(25,self.hp))  + int(ratio(46,self.lvl))           

   def stats(self):
      print("Level: {0} \nMaxHealth: {1}\n \nMatches Lost: {2}\nMatches Won: {3}".format( str(self.lvl),str(self.maxhp),str(self.lost),str(self.won)))

   def dmggive(self,pwr):
      if pwr==0: pwr= ratio(randint(4,7),self.maxhp)
      elif pwr==1 and self.sp>=int(ratio(35,self.maxsp)): pwr= int(ratio(randint(4,8),self.maxhp))
      elif pwr==2 and self.sp>=int(ratio(50,self.maxsp)): pwr= int(ratio(randint(13,17),self.maxhp))
      elif pwr==3 and self.sp>=int(ratio(80,self.maxsp)): pwr= int(ratio(randint(18,24),self.maxhp))
      else:
             print("{0} used attack {1} but did not have enough stamina".format(self.nm,str(pwr)))
             pwr= ratio(randint(4,7),self.maxhp)
      return pwr;

   def dmgtake(self,pwr):
      self.hp-= pwr;
      dmglv= '';
      if pwr >= int(ratio(10,self.hp)) and pwr <= int(ratio(17,self.hp)): dmglv= "Woah!,"
      elif pwr >= int(ratio(18,self.hp)) and pwr <= int(ratio(25,self.hp)): dmglv= "Critical!"
      elif pwr >= int(ratio(26,self.hp)): dmglv= "SAVAGE!!"
      print("{0}{1}'s hp got reduced by {2}! His hp is now {3} ".format(dmglv,self.nm,str(pwr),str(self.hp)))

   def minsp(self,pwrlv):
      reduce= 0
      if pwrlv==0: 
         reduce= 0
      else:     #mana for using specials
         if pwrlv==1: reduce= int(ratio(25,self.maxsp)) 
         elif pwrlv==2: reduce= int(ratio(50,self.maxsp)) 
         elif pwrlv==3: reduce= int(ratio(80,self.maxsp))
      self.sp-=reduce  
      if self.sp<0: self.sp= 0
      print("{0}'s stamina got reduced by {1} because of the attacK! ".format(self.nm,str(reduce)))

   def life(self):
      return self.hp   

   def level(self):
      return self.lvl
 
   def regen(self,ctr): # regeneration with ctr as chance( def game())
      if ctr==2:
         regenrated= int(ratio(randint(3,7),self.maxhp));
         self.hp+= regenrated
         if self.hp>= self.maxhp: self.hp= self.maxhp
         print("{0}'s hp has regenerated by {1}".format(self.nm,str(regenrated)))

   def freshen(self):
      regenrated= int(ratio(randint(20,40),self.maxsp))
      self.sp+= regenrated;
      if self.sp>self.maxsp: self.sp= self.maxsp
      print("{0}'s stamina regenrated by {1}".format(self.nm,str(regenrated)))

   def __floordiv__(self,other):
      return "\n     {0}\t vs \t{1}\nLv:   {2}\t \t \t \t  {3}\nMaxHealth: {4}\t \t \t{5}\nMathchesLost:  {6}\t \t {7}\nMatchesWon:   {8}\t \t \t{9}".format(self.nm,other.nm,str(self.lvl),str(other.lvl),str(self.hp),str(other.hp),str(self.lost),str(other.lost),str(self.won),str(other.won));


def load_game(save_dir):
    f1= file(save_dir)
    try:
       data= f1.get_line(1,f1.len_line());
       return data
    finally:
       f1.close()
Pdata= load_game("dats/fight.txt")

def save(line,text):
    f1= file("dats/fight.txt")
    f1.insert(line,text)
    f1.close()

def char():
   character= ("Bruno","Brolly","RedPanda","The Beast","Roger","Axel","Damonite","Miya","Blaze","LizardMutant","Unknown","AlienX","Marshall")
   surname= ("Destroyer","Alien","Beast!","Monster","Tailor","ArchFighter","Ignitor","Killer")
   com= choice(character)+"(the"+"{0})".format(choice(surname));
   return com

level= int(Pdata[0][3]);  health= int(Pdata[1][3:-1])
lost= int(Pdata[2][5:-1]);  won= int(Pdata[3][4:-1])
sp= int(Pdata[5][5:-1])
exp= float(Pdata[4][4:-1]); ttlexp= float(Pdata[10][7:-1])

attacks= list();
for c in Pdata[6:9]:
   attacks.append(c)
if(Pdata[9][0])=="n":
   name= str(input("Enter your name: "))
   save(10,name)
else:
   name= Pdata[9][0:-1]
p1= Fighter(name,level,health,lost,won,sp)
p1.pwrs(attacks[0],attacks[1],attacks[2])
p2= Fighter(char(),
 randint (p1.level(), p1.level() + int( ratio ( 5,p1.level() ) ) ),  randint (p1.life (), p1.life() + int ( ratio ( 3 , p1.life () ) ) ), randint(1,100),randint(1,100),sp)
p2.pwrs(attacks[0],attacks[1],attacks[2])

a1= attacks[0]
a2= attacks[1]
a3= attacks[2]

def game():
   def pause():
      nousequery= str(input("\n\t press enter to continue..."))
   ask= str(input("Are you ready to FIGHT??: "))
   if(ask.startswith("n") or ask.startswith("N")):
      print("TOO Bad! You're still Gonna fight")
    
   print(p1//p2,"\n \n ")
   hr(20,4,"=")
   pause()

  
   while True: 
      if p1.hp<=0 or p2.hp<=0:
         break
      def curstats(): 
         dot1 = in_str('.',str(p1.life()))
         if dot1 == 'null':
            dot1 = len( str(p1.life()) ) 
         print("\n\n\t\t\t {0}\n\tHealth: {1}\t \t \t \t Stamina: {2}".format(str(p1.nm).upper(),str(p1.life())[0:dot1],str(p1.sp)))

         dot2 = in_str('.',str(p2.life())) 
         if dot2 == "null":
            dot2 = len( str(p2.life()) )
         print("\n\n\t\t\t {0}\n\tHealth: {1}\t \t \t \t Stamina: {2}".format(str(p2.nm).upper(),str(p2.life())[0:dot2],str(p2.sp)))  

      chancehp1= randint(1,4); #chance of regenerating hp;
      chancehp2= randint(1,4); 
      curstats()
      print("\n\nYour turn, Choose to attack: ")
      ask= int(input("normal{0}: 0 \n {3}({4}{5}) {0}: 1 \n {3}({4}{6}) {1}: 2 \n {3}({4}{7}) {2}: 3\n-->".format(a1,a2,a3,"stamina","-",str(int(ratio(35,p1.maxsp))),str(int(ratio(50,p1.maxsp))),str(int(ratio(80,p1.maxsp))))))
      print("\n You used attack: "+str(ask))
      dmg1= p1.dmggive(ask)
      p1.minsp(ask)
      p2.dmgtake(dmg1)
      if p1.hp<=0 or p2.hp<=0:
         break
      spc();
      p1.freshen();
      pause()

      spc(20) 
      curstats()
      print("\n\nOpponent's turn: ")
      atk= randint(0,3)
      print("\n Opponent used attack: "+str(atk))
      dmg2= p2.dmggive(ask)
      p2.minsp(atk)
      p1.dmgtake(dmg2); spc();
      if p1.hp<=0 or p2.hp<=0:
         break
      p2.freshen();
      pause()
      spc(50)
      
      spc(5);
game()
   
def check_result():
   stat= ""
   if p2.hp<=0:
      stat= "You WON!!"
      p1.won+=1
   else:
      stat= "You Lost"
      p1.lost+=1
   print("\n\n\t\t {0}".format(stat))
   if stat== "You WON!!": return True
   return False


def checklvup(rsl):
   global Pdata, p1,exp;
   if rsl== True:
      exp-= int(p1.level())*10
   else:
      exp-= int(p1.level())/3
   if exp<=0:
      return True
   return False

def unlock():
   pw1= ["kick","JetPistol","SuperKick","Hulk!Punch","Gomu Gomu No JetCulverin"]
   pw2= ["punch","BazookaPunch","RhinoSchnider","KongGun","Gomu Gomu No BlackMambaGattling"]
   ults=["rocketkick","Kamehameha","ThousandArms:JetGattling","Gomu Gomu No KingKongGun","KingCobraBash"]
   col=  p1.lvl//10
   pwrs= [pw1[col],pw2[col],ults[col]]
   print("You unlocked new powers: \nPower1: {0}\nPower2: {1}\n Ultimate: {2}".format(pwrs[0],pwrs[1],pwrs[2]))
   return pwrs

def end():
   global exp,Pdata,ttlexp;
   spc(4)
   rsl= check_result()
   if checklvup(rsl) == True:  # if lv up== true
      p1.lvl+=1;
      p1.maxhp= p1.maxhp + p1.lvl*5
      p1.maxsp= p1.maxsp + p1.lvl*4
      if p1.lvl%10== True :
         pwrs= unlock()
         save(7,pwrs[0])
         save(8,pwrs[1])
         save(9,pwrs[2])
   p1.stats()   
   if exp<=0:
      exp= 0
   exp_bfrmatch= float(Pdata[4][4:-1])
   increased_exp= exp_bfrmatch- exp
   ttlexp+=increased_exp
   print("Exp to lv up: "+str(exp)[0:2]+"\nTotal Experience Points: {0} (+{1})".format(str(ttlexp)[0:2],str(increased_exp)[0:2])) 

end()

def save_game():
   global exp,ttlexp;
   save(1,"lv:"+str(p1.lvl))
   save(2,"hp:"+str(p1.maxhp))
   save(3,"lost:"+str(p1.lost))
   save(4,"won:"+str(p1.won))
   if exp<=0:
      exp+= p1.lvl*10
      exp= (exp*2) + (p1.lvl*10)
   save(5,"exp:"+str(exp))
   save(6,"mana:"+str(p1.maxsp))
   save(11,"ttlexp:"+str(ttlexp))

save_game()